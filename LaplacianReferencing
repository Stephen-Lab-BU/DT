% Loop through each main electrode
for i = 1:length(MainElectrode)
    Electrode = MainElectrode{i};
    
    
    % Check if the current electrode exists in Electrode_neighbors
    if isKey(Electrode_neighbors, Electrode)
        % Obtain list of neighbors for the current electrode
        neighbors = Electrode_neighbors(Electrode);
        
        % Create a variable to hold the sum of the neighbors' signals
        sumOfNeighborSignals = zeros(1, size(AdjacencyMatrix, 2)); % Assuming columns represent different measurements

        % Loop through each neighbor to accumulate their signals
        for k = 1:length(neighbors)
            neighbor = neighbors{k};  % Access the k-th neighbor from the neighbors cell array

            % Check if the neighbor is a valid key before attempting to access the map
            if isKey(nameToIndex, neighbor)
                neighborIndex = nameToIndex(neighbor);  % Convert the neighbor name to its index

                % Add this neighbor's signal to the sum
                sumOfNeighborSignals = sumOfNeighborSignals + AdjacencyMatrix(neighborIndex, :);
            else
                fprintf('Invalid neighbor name: "%s" for electrode: "%s"\n', neighbor, Electrode);
            end
        end

        % Calculate the average signal of the neighbors
        avgNeighborSignal = sumOfNeighborSignals / length(neighbors);

        % Subtract the average neighbor signal from the current electrode's signal
        LaplacianMatrix(i, :) = AdjacencyMatrix(i, :) - avgNeighborSignal;
    else
        fprintf('No neighbors found for electrode: %s\n', Electrode);
    end
end

disp(LaplacianMatrix(1:10,1:10));
