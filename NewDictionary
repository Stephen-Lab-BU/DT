% Define the list of all 64 electrodes
MainElectrode = {'FPz', 'AFz', 'Fz', 'FCz', 'Cz', 'CPz', 'Pz', 'POz', 'Oz', 'Iz', 'FP1', 'AF3', 'F1', 'FC1', 'CP1', 'P1', 'F3', 'FC3', 'C3', 'CP3', 'P3', 'PO3', 'O1', 'AF7', 'F7', 'FT7', 'T7', 'TP9', 'P9', 'F5', 'FC5', 'C5', 'CP5', 'P5', 'PO7', 'TP7', 'P7', 'FP2', 'AF4', 'F4', 'FC4', 'C4', 'CP4', 'P4', 'PO4', 'O2', 'F2', 'FC2', 'C2', 'CP2', 'P2', 'AF8', 'F6', 'FC6', 'C6', 'CP6', 'P6', 'PO8', 'F8', 'T8', 'TP8','P10', 'FT8','C1'};

% Initialize a 64x64 matrix with zeros
adjacencyMatrix = zeros(64, 64);

%%
electrode_neighbors = struct(...
    'FPz', {{'FP1', 'FP2', 'AFz', 'AF3'}}, ...
    'AFz', {{'FPz', 'AF4', 'AF3', 'F2'}}, ...
    'Fz', {{'AFz', 'F1', 'F2', 'FCz'}}, ...
    'FCz', {{'Fz', 'FC2', 'FC1', 'Cz'}}, ...
    'Cz', {{'FCz', 'C1', 'C2', 'CPz'}}, ...
    'CPz', {{'Cz', 'CP2', 'CP1', 'Pz'}}, ...
    'Pz', {{'P2', 'CPz', 'P1', 'POz'}}, ...
    'POz', {{'Pz', 'PO4', 'Oz', 'PO3'}}, ...
    'Oz', {{'O2', 'POz', 'O1', 'Iz'}}, ...
    'Iz', {{'O2', 'Oz', 'O1'}}, ...
    'FP1', {{'FPz','AF7', 'AF3', 'AFz'}}, ...
    'AF3', {{'AFz','F1', 'F3', 'AF7'}}, ...
    'F1', {{'Fz', 'F3', 'FC1', 'AF3'}}, ...
    'FC1', {{'FCz','FC3', 'F1', 'C1'}}, ...
    'CP1', {{'CP2', 'CP3', 'C1', 'P1'}}, ...
    'P1', {{'Pz','P3', 'CP1', 'PO3'}}, ...
    'F3', {{'F1', 'F5', 'AF3', 'FC3'}}, ...
    'FC3', {{'FC1', 'FC5', 'C3', 'F3'}}, ...
    'C3', {{'FC3', 'C1', 'C5', 'CP3'}}, ...
    'CP3', {{'CP1', 'CP5', 'C3', 'P3'}}, ...
    'P3', {{'P1', 'P5', 'CP3', 'PO3'}}, ...
    'PO3', {{'P1', 'P3', 'O1', 'PO7'}}, ...
    'O1', {{'PO3', 'PO7', 'Iz', 'Oz'}}, ...
    'AF7', {{'FP1','AF3', 'F5', 'F7'}}, ...
    'F7', {{'AF6', 'F5', 'FC5', 'FT7'}}, ...
    'FT7', {{'FC5', 'F5', 'F7', 'T7'}}, ...
    'T7', {{'FT7', 'C5', 'TP7', 'TP9'}}, ...
    'TP9', {{'T7', 'TP7', 'P9', 'P7'}}, ...
    'P9', {{'P7', 'TP9', 'TP7', 'PO7'}}, ...
    'F5', {{'F3', 'F7', 'AF7', 'FC5'}}, ...
    'FC5', {{'F5', 'FC3', 'FT7', 'C5'}}, ...
    'C5', {{'C3', 'T7', 'FC5', 'CP5'}}, ...
    'CP5', {{'CP3', 'C5', 'TP7', 'P5'}}, ...
    'P5', {{'P3', 'P7', 'CP5', 'PO7'}}, ...
    'PO7', {{'P5', 'P7', 'O1', 'PO3'}}, ...
    'TP7', {{'CP5', 'TP9', 'P7', 'T7'}}, ...
    'P7', {{'P5', 'PO7', 'P9', 'TP9'}}, ...
    'FP2', {{'AF4', 'AF8', 'FPz', 'AFz'}}, ...
    'AF4', {{'AF8', 'AFz', 'F4', 'FP2'}}, ...
    'F4', {{'F6', 'F2', 'AF4', 'FC4'}}, ...
    'FC4', {{'FC6', 'FC2', 'F4', 'C4'}}, ...
    'C4', {{'C6', 'C2', 'FC4', 'CP4'}}, ...
    'CP4', {{'CP6', 'CP2', 'C4', 'P4'}}, ...
    'P4', {{'P2', 'P6', 'CP4', 'PO4'}}, ...
    'PO4', {{'PO8', 'O2', 'POz', 'P4'}}, ...
    'O2', {{'PO8', 'Oz', 'POz', 'Iz'}}, ...
    'F2', {{'AF4', 'F4', 'FC2', 'Fz'}}, ...
    'FC2', {{'FC4', 'FCz', 'C2', 'F2'}}, ...
    'C2', {{'C4', 'Cz', 'CP2', 'FC2'}}, ...
    'CP2', {{'CP4', 'CPz', 'C2', 'P2'}}, ...
    'P2', {{'P4', 'Pz', 'CP2', 'PO4'}}, ...
    'AF8', {{'FP2', 'AF4', 'F8', 'F6'}}, ...
    'F6', {{'F8', 'FC6', 'F4', 'AF8'}}, ...
    'FC6', {{'FT8', 'F6', 'C6', 'FC4'}}, ...
    'C6', {{'T8', 'C4', 'CP6', 'FC6'}}, ...
    'CP6', {{'TP8', 'CP4', 'P6', 'C6'}}, ...
    'P6', {{'P8', 'P4', 'CP6', 'PO8'}}, ...
    'PO8', {{'P6', 'P8', 'O2', 'PO4'}}, ...
    'F8', {{'FT8', 'F6', 'AF8', 'FC6'}}, ...
    'T8', {{'TP10', 'FT8', 'C6', 'TP8'}}, ...
    'TP8', {{'TP10', 'T8', 'P8', 'CP6'}},...
    'P10', {{'P8', 'TP8', 'PO8', 'TP10'}},...
    'FT8', {{'T8', 'F8', 'FC6', 'F6'}},...
   'C1', {{'FC1', 'CP1', 'C3', 'Cz'}} ...  
);
%%
% Create a mapping from electrode names to indices
nameToIndex = containers.Map(MainElectrode, 1:length(MainElectrode));

% Populate the adjacency matrix with 1s for neighbors
for i = 1:length(MainElectrode)
    electrode = MainElectrode{i};
    if isfield(electrode_neighbors, electrode)
        neighbors = electrode_neighbors.(electrode);
        for j = 1:length(neighbors)
            neighbor = neighbors{j};
            % Check if the neighbor is in the list to avoid out-of-bounds errors
            if isKey(nameToIndex, neighbor)
                adjacencyMatrix(i, nameToIndex(neighbor)) = 1;
            end
        end
    end
end
%%
%Verification Purposes before topoplot
% Create a table from the adjacency matrix with electrode labels
adjacencyTable = array2table(adjacencyMatrix, 'RowNames', MainElectrode, 'VariableNames', MainElectrode);

% Display part of the table to verify
disp(adjacencyTable(1:10, 1:10));  % Adjust indices as necessary to display the desired part of the table
